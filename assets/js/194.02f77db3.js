(window.webpackJsonp=window.webpackJsonp||[]).push([[194],{402:function(a,e,t){"use strict";t.r(e);var p=t(0),m=Object(p.a)({},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"content"},[a._m(0),a._v(" "),t("p",[a._v("There are three declaration statements in JavaScript: "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",target:"_blank",rel:"noopener noreferrer"}},[a._v("var"),t("OutboundLink")],1),a._v(", "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",target:"_blank",rel:"noopener noreferrer"}},[a._v("let"),t("OutboundLink")],1),a._v(", and "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",target:"_blank",rel:"noopener noreferrer"}},[a._v("const"),t("OutboundLink")],1),a._v(". To understand why there are three different declaration statements, we must look at the history of the JavaScript.")]),a._v(" "),a._m(1),a._v(" "),t("p",[a._v("Each declaring statement will cause the variable to act a little differently. Below is a brief explanation of those differences.")]),a._v(" "),a._m(2),a._v(" "),a._m(3),a._v(" "),a._m(4),a._v(" "),t("iframe",{staticStyle:{width:"100%"},attrs:{title:"var Statement",src:"//codepen.io/IMD/embed/OzwMBj/?height=365&theme-id=0&default-tab=js,result&embed-version=2",width:"300",height:"365",allowfullscreen:"allowfullscreen"}},[a._v('See the Pen &amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD/pen/OzwMBj/"&amp;amp;amp;amp;amp;amp;amp;amp;gt;var Statement&amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io"&amp;amp;amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;gt;.')]),a._v(" "),a._m(5),a._v(" "),a._m(6),a._v(" "),t("iframe",{staticStyle:{width:"100%"},attrs:{title:"let Statement",src:"//codepen.io/IMD/embed/wpxMVy/?height=422&theme-id=0&default-tab=js,result&embed-version=2",width:"300",height:"422",allowfullscreen:"allowfullscreen"}},[a._v('See the Pen &amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD/pen/wpxMVy/"&amp;amp;amp;amp;amp;amp;gt;let Statement&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io"&amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt;.')]),a._v(" "),a._m(7),a._v(" "),a._m(8),a._v(" "),a._m(9),a._v(" "),t("iframe",{staticStyle:{width:"100%"},attrs:{title:"const Statement",src:"//codepen.io/IMD/embed/dJjMGO/?height=456&theme-id=0&default-tab=js,result&embed-version=2",width:"300",height:"456",allowfullscreen:"allowfullscreen"}},[a._v('See the Pen &amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD/pen/dJjMGO/"&amp;amp;amp;amp;amp;amp;gt;const Statement&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io"&amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt;.')])])},[function(){var a=this.$createElement,e=this._self._c||a;return e("h1",{attrs:{id:"declaration-statements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#declaration-statements","aria-hidden":"true"}},[this._v("#")]),this._v(" Declaration Statements")])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("p",[a._v("In 1995, when JavaScript was first created, it had only one declaration statement "),t("code",[a._v("var")]),a._v(". For two decades it was the only way of declaring variables. But "),t("code",[a._v("var")]),a._v(" had limitations that some programmers, especially those who came from languages like Java, found annoying. So, in July 2015, the JavaScript version known as ES2015 or ES6 introduced two new declaration statement, "),t("code",[a._v("let")]),a._v(" and "),t("code",[a._v("const")]),a._v(".")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h2",{attrs:{id:"var"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var","aria-hidden":"true"}},[this._v("#")]),this._v(" var")])},function(){var a=this.$createElement,e=this._self._c||a;return e("p",[this._v("The "),e("code",[this._v("var")]),this._v(" statement is used to declare a variable that has function scope or is accessible anywhere within a function. If declared outside of a function it will be given a global scope and be added to the global object. Variables declared with "),e("code",[this._v("var")]),this._v(" do not need to be assigned a value, can be re-assigned a value, and can be re-declared without an error.")])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[a._v("NOTE")]),a._v(" "),t("p",[a._v("While the "),t("code",[a._v("var")]),a._v(" declaration statement still works, it is considered "),t("strong",[a._v('"bad practice"')]),a._v(" to use. It is better to use "),t("code",[a._v("let")]),a._v(" or "),t("code",[a._v("const")]),a._v(".")])])},function(){var a=this.$createElement,e=this._self._c||a;return e("h2",{attrs:{id:"let"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let","aria-hidden":"true"}},[this._v("#")]),this._v(" let")])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("p",[a._v("The "),t("code",[a._v("let")]),a._v(" statement is used to declare a variable that has block scope or is accessible anywhere within a block or a set of curly braces. If declared outside of a function or block it will be given global scope but is "),t("strong",[a._v("NOT")]),a._v(" added to the global object. Variables declared with "),t("code",[a._v("let")]),a._v(" do not need to be assigned a value, can be re-assigned a value, but "),t("strong",[a._v("CANNOT")]),a._v(" be re-declared and will result in an error.")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h2",{attrs:{id:"const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const","aria-hidden":"true"}},[this._v("#")]),this._v(" const")])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("p",[a._v("The "),t("code",[a._v("const")]),a._v(" statement is used to declare a variable that has block scope or is accessible anywhere within a block or a set of curly braces. If declared outside of a function or block it will be given global scope but is "),t("strong",[a._v("NOT")]),a._v(" added to the global object. Variables declared with "),t("code",[a._v("const")]),a._v(" "),t("strong",[a._v("MUST")]),a._v(" to be assigned a value, "),t("strong",[a._v("CANNOT")]),a._v(" be re-assigned a value, and "),t("strong",[a._v("CANNOT")]),a._v(" be re-declared. If any of these situations occur it will result in an error.")])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[a._v("NOTE")]),a._v(" "),t("p",[a._v("Because "),t("code",[a._v("const")]),a._v(" forces a value to be set to any variable declared and prevents re-declaration, it is considered best practice to use "),t("code",[a._v("const")]),a._v(" in all cases, except when it is known that a variable value will change. Then use "),t("code",[a._v("let")]),a._v(".")])])}],!1,null,null,null);e.default=m.exports}}]);