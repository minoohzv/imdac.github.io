(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{321:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("div",{staticClass:"watch"},[s("p",[s("a",{attrs:{href:"https://www.linkedin.com/learning/git-essential-training-the-basics/your-first-commit",target:"_blank",rel:"noopener noreferrer"}},[t._v('Watch "Your first commit" on LinkedIn Learning'),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("Once a change has been made to a project, it is possible to commit the change to Git. Committing is how we tell Git to make a change set or snapshot of our project.")]),t._v(" "),s("p",[t._v("Committing changes is a two step process. First new changes must be added to the staging area. The staging area is how Git distinguishes between the changes that we want to commit verses the ones that we do not. Only changes in the staging area can be committed.")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),s("p",[t._v("It is possible to add multiple files to the staging area by using different options.")]),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),s("p",[t._v("While there are few requirements when it comes to commit messages, there are best practices for what kind of messages should be added to commits.")]),t._v(" "),t._m(9)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"commit-a-change"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-a-change","aria-hidden":"true"}},[this._v("#")]),this._v(" Commit a Change")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"adding-to-staging-area"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-to-staging-area","aria-hidden":"true"}},[this._v("#")]),this._v(" Adding to staging area")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("To add a specific file to the staging area, we would use the "),e("code",[this._v("git add")]),this._v(" command from within the project folder followed by the path to the file.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# Add index.html to the staging area")]),this._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("add")]),this._v(" index.html\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files that end in .html")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *.html\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files in the css directory")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" css/*\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files everywhere")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --all\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"committing-the-changes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#committing-the-changes","aria-hidden":"true"}},[this._v("#")]),this._v(" Committing the Changes")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Once a file has been added to the staging area, it can be committed using the "),e("code",[this._v("git commit")]),this._v(" command. Now, each time a commit is made, it is important to add a short message that describes what the commit or changes are doing. We add a message by using the "),e("code",[this._v("-m")]),this._v(" option followed by the message in quotes.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[this._v('"Adds an index.html to my project"')]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"commit-messages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-messages","aria-hidden":"true"}},[this._v("#")]),this._v(" Commit Messages")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("Messages should be short single-line summaries (less than 50 characters). More complete description can be added to the summary after a blank line.")]),this._v(" "),e("li",[this._v("Messages should be written in present tense, not past tense.")]),this._v(" "),e("li",[this._v("Messages should be clear and descriptive")])])}],!1,null,null,null);e.default=n.exports}}]);