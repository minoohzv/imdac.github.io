(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{425:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),n("p",[n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Events",target:"_blank",rel:"noopener noreferrer"}},[e._v("DOM Events"),n("OutboundLink")],1),e._v(" are notification that some action has occurred on the page and can represent a basic user action or the status of the render model. For example, when a user clicks on a button, that is a DOM Event. When the pages loads, that is a DOM Event. When the page is scrolled, the window is resized, or the mouse is moved are all DOM Events. There are DOM Events for the keyboard, mouse, touch, clipboard, media, view, printing, drag & drop, animation, forms, and more.")]),e._v(" "),n("p",[e._v("Each event is represented by an "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Event",target:"_blank",rel:"noopener noreferrer"}},[e._v("Event"),n("OutboundLink")],1),e._v(" interface, which acts as an object. It will include the event type and on which element the event occurred. Adding event listeners to DOM elements gives us a programmatic ability to interact with this Event interface and  respond to these DOM event.")]),e._v(" "),n("p",[e._v("The following pages detail the different DOM event and how we can respond to them.")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"dom-events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-events","aria-hidden":"true"}},[this._v("#")]),this._v(" DOM Events")])}],!1,null,null,null);t.default=r.exports}}]);