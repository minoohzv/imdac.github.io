(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{377:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"javascript-booleans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-booleans","aria-hidden":"true"}},[e._v("#")]),e._v(" JavaScript Booleans")]),e._v(" "),s("p",[e._v("A boolean is a data type that can only have two values "),s("code",[e._v("true")]),e._v(" or "),s("code",[e._v("false")]),e._v(". In JavaScript, these "),s("code",[e._v("true")]),e._v(" and "),s("code",[e._v("false")]),e._v(" are not strings but special keywords.")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" isActive "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" isAdmin "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])]),s("h2",{attrs:{id:"expressions-as-booleans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expressions-as-booleans","aria-hidden":"true"}},[e._v("#")]),e._v(" Expressions as Booleans")]),e._v(" "),s("p",[e._v("Booleans are often used to decide which block of code to execute (conditional statements) or repeat (loops). In these cases, often an expression is used in place the "),s("code",[e._v("true")]),e._v(" and "),s("code",[e._v("false")]),e._v(" values.")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* if statement */")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("number "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// if the variable number is equal to 5")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// code to execute if the conditional expression is true")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("In the above example, the variable "),s("code",[e._v("number")]),e._v(" does equal five, so the expression "),s("code",[e._v("number === 5")]),e._v(" will equal "),s("code",[e._v("true")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"truthy-and-falsy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#truthy-and-falsy","aria-hidden":"true"}},[e._v("#")]),e._v(" Truthy and Falsy")]),e._v(" "),s("p",[e._v("Some expressions cannot truly be either "),s("code",[e._v("true")]),e._v(" or "),s("code",[e._v("false")]),e._v(", but they can take on some of the properties of "),s("code",[e._v("true")]),e._v(" or "),s("code",[e._v("false")]),e._v(". Review the following.")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Michael'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" empty "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("''")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// if the variable name is true")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// code to execute if the conditional expression is true")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// will not execute")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("In the example above, we are asking if the variable "),s("code",[e._v("name")]),e._v(" is "),s("code",[e._v("true")]),e._v(" or "),s("code",[e._v("false")]),e._v(". But because "),s("code",[e._v("name")]),e._v(" is a string, by definition, it cannot be "),s("code",[e._v("true")]),e._v(" or "),s("code",[e._v("false")]),e._v(". However, due to type conversion, any non-empty string is perceived to be "),s("code",[e._v("true")]),e._v(". We call such expressions, "),s("em",[e._v("truthy")]),e._v(" expressions. Because, while the variable "),s("code",[e._v("name")]),e._v(" is not "),s("code",[e._v("true")]),e._v(", JavaScript will act as if it is true. Likewise, an empty string, like the variable "),s("code",[e._v("empty")]),e._v(" will be considered "),s("code",[e._v("false")]),e._v(" or "),s("em",[e._v("falsy")])]),e._v(" "),s("p",[e._v("In many ways, there is no difference between "),s("code",[e._v("true")]),e._v(" and "),s("em",[e._v("truthy")]),e._v(" and "),s("code",[e._v("false")]),e._v(" and "),s("em",[e._v("falsy")]),e._v(". But, they are "),s("strong",[e._v("NOT")]),e._v(" identical.")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Michael'")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// will not execute")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("In the example above, we can see that the variable "),s("code",[e._v("name")]),e._v(" while "),s("em",[e._v("truthy")]),e._v(" does not equal "),s("code",[e._v("true")]),e._v(".")])])}],!1,null,null,null);t.default=n.exports}}]);